###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Archetype(BaseModel):
    archetype_class: Optional[str] = None
    trope_tags: List[str]

class Behavior(BaseModel):
    behavior_arc: Optional[str] = None
    refusal_style: Optional[str] = None
    trigger_to_help: Optional[str] = None
    mannerisms: List[str]
    quirks: List[str]

class Construct(BaseModel):
    identity: Optional["Identity"] = None
    archetype: Optional["Archetype"] = None
    demographic: Optional["Demographic"] = None
    psychographics: Optional["Psychographics"] = None
    behavior: Optional["Behavior"] = None
    visual_profile: Optional["VisualProfile"] = None
    voice: Optional["Voice"] = None
    lore: Optional["Lore"] = None
    lifestyle: Optional["LifeStyle"] = None
    llm_tuning: Optional["LLMTuning"] = None

class Demographic(BaseModel):
    gender: Optional[str] = None
    age: Optional[str] = None
    race_species: Optional[str] = None
    birthday: Optional[str] = None
    birthplace: Optional[str] = None
    height: Optional[str] = None
    weight: Optional[str] = None

class Identity(BaseModel):
    name: Optional[str] = None
    alias: Optional[str] = None
    role: Optional[str] = None
    tags: List[str]

class LLMTuning(BaseModel):
    temperature: Optional[float] = None
    top_p: Optional[float] = None
    presence_penalty: Optional[float] = None
    frequency_penalty: Optional[float] = None

class LifeStyle(BaseModel):
    occupation: Optional[str] = None
    hobbies: List[str]
    interests: List[str]
    favorite_foods: List[str]
    dislikes: List[str]
    daily_routine: Optional[str] = None

class Lore(BaseModel):
    backstory: Optional[str] = None
    defining_moments: List[str]

class Psychographics(BaseModel):
    personality_summary: Optional[str] = None
    core_values: List[str]
    fears: List[str]
    desires: List[str]
    beliefs: List[str]

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[str]
    skills: List[str]

class VisualProfile(BaseModel):
    body: Optional[str] = None
    features: Optional[str] = None
    style: Optional[str] = None
    aura: Optional[str] = None

class Voice(BaseModel):
    tone: List[str]
    speech_style: Optional[str] = None
    pov: Optional[str] = None
    accent: Optional[str] = None
