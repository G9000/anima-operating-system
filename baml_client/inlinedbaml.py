###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> Ollama {\r\n  provider \"openai-generic\"\r\n  options {\r\n    base_url \"http://localhost:11434/v1\"\r\n    model gemma3:4b\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "construct.baml": "class LLMTuning {\r\n    temperature float @description(\"Temperature for randomness in generation, 0.0-1.0\")\r\n    top_p float @description(\"Top-p sampling for randomness, 0.0-1.0\")\r\n    presence_penalty float @description(\"Penalty for new topics, -2.0 to 2.0\")\r\n    frequency_penalty float @description(\"Penalty for repeated topics, -2.0 to 2.0\")\r\n}\r\n\r\n\r\nclass Archetype {\r\n    archetype_class string @description(\"The archetype class of the persona, e.g., 'The Hero', 'The Mentor'\")\r\n    trope_tags string[] @description(\"Trope tags, ideally 3-5, e.g., ['Wandering empath', 'Reluctant hero']\")\r\n}\r\n\r\nclass Demographic {\r\n    gender string @description(\"Gender identity, flexible definition\")\r\n    age string @description(\"Age description, e.g., 'Mid 30s', 'Ageless'\")\r\n    race_species string @description(\"Race or species, e.g., 'Human', 'Android'\")\r\n    birthday string? @description(\"Optional birthday of the persona\")\r\n    birthplace string? @description(\"Optional birthplace of the persona\")\r\n    height string? @description(\"Height description, e.g., '5'7\\\", 'Tall'\")\r\n    weight string? @description(\"Weight description, optional, e.g., 'Lean'\")\r\n}\r\n\r\nclass Psychographics {\r\n    personality_summary string @description(\"Brief personality summary, e.g., 'Haunted yet compassionate'\")\r\n    core_values string[] @description(\"Key values, 3-5 recommended\")\r\n    fears string[] @description(\"Main fears, 2-4 recommended\")\r\n    desires string[] @description(\"Core desires, 2-4 recommended\")\r\n    beliefs string[] @description(\"Fundamental beliefs or worldview\")\r\n}\r\n\r\nclass Behavior {\r\n    behavior_arc string @description(\"Behavior evolution, e.g., 'Guarded â†’ Loyal'\")\r\n    refusal_style string @description(\"How persona initially resists requests\")\r\n    trigger_to_help string @description(\"What motivates persona to help\")\r\n    mannerisms string[] @description(\"Mannerisms, 2-4 recommended\")\r\n    quirks string[] @description(\"Quirks, 2-4 recommended\")\r\n}\r\n\r\nclass VisualProfile {\r\n    body string @description(\"General body description, e.g., 'Tall, wiry'\")\r\n    features string @description(\"Key features like scars, eyes, skin\")\r\n    style string @description(\"Clothing and accessories description\")\r\n    aura string? @description(\"Optional vibe or presence descriptor\")\r\n}\r\n\r\nclass Voice {\r\n    tone string[] @description(\"Tone attributes, e.g., ['Soft-spoken', 'Melancholic']\")\r\n    speech_style string @description(\"Speech style, e.g., 'Formal', 'Poetic'\")\r\n    pov string @description(\"Narration style, e.g., 'First person'\")\r\n    accent string? @description(\"Optional accent, e.g., 'British'\")\r\n}\r\n\r\nclass Lore {\r\n    backstory string @description(\"Detailed origin story or background\")\r\n    defining_moments string[] @description(\"Crucial life-changing events, 2-4 recommended\")\r\n}\r\n\r\nclass LifeStyle {\r\n    occupation string @description(\"Occupation or role, e.g., 'Bounty Hunter'\")\r\n    hobbies string[] @description(\"Daily or recreational activities persona enjoys, e.g., 'Brewing tea', 'Gardening', 'Sword training'\")\r\n    interests string[] @description(\"Topics or fields persona is drawn to, e.g., 'Philosophy', 'Ancient history', 'Cybernetics'\")\r\n    favorite_foods string[] @description(\"Favorite foods or drinks, e.g., 'Spiced tea', 'Street ramen', 'Synth-whiskey'\")\r\n    dislikes string[] @description(\"Things persona actively dislikes, e.g., 'Loud noises', 'Crowded places', 'Sweet foods'\")\r\n    daily_routine string? @description(\"Brief description of typical day or rituals, optional\")\r\n}\r\n\r\nclass Identity {\r\n    name string @description(\"Full name of the persona\")\r\n    alias string? @description(\"Alias or nickname\")\r\n    role string @description(\"Primary narrative role of persona\")\r\n    tags string[] @description(\"Searchable tags, ideally 3-5 tags\")\r\n}\r\n\r\n\r\nclass Construct {\r\n    identity Identity @description(\"Identity details\")\r\n    archetype Archetype @description(\"Archetype details\")\r\n    demographic Demographic @description(\"Demographic details\")\r\n    psychographics Psychographics @description(\"Psychographic profile\")\r\n    behavior Behavior @description(\"Behavioral profile\")\r\n    visual_profile VisualProfile @description(\"Visual profile description\")\r\n    voice Voice @description(\"Voice and speech details\")\r\n    lore Lore @description(\"Backstory and lore\")\r\n    lifestyle LifeStyle @description(\"Lifestyle and daily activities\")\r\n    llm_tuning LLMTuning @description(\"LLM tuning parameters\")\r\n}\r\n\r\n\r\n\r\nfunction GenerateConstruct(promptReq: string) -> Construct {\r\n  client Ollama\r\n  prompt #\"\r\n    {# start a user message #}\r\n    {{ _.role(\"user\") }}\r\n     \r\n    You are Persona Generator, a tool that creates detailed personas for various narrative purposes.\r\n\r\n    Avoid generating any unwanted or unnecessary information. Only focus on the persona generation.\r\n    Please ensure to follow the given structured:\r\n    {{ promptReq }}\r\n\r\n    {# end the user message #}\r\n    {{ _.role(\"persona_generator_v1\") }}\r\n    {{ promptReq }}\r\n\r\n    {# special macro to print the output schema instructions. #}\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\ntest ConstructGenerator {\r\n  functions [GenerateConstruct]\r\n  args {\r\n    promptReq \"Generate me a traveling cat and dog duo who are best brothers that travel the verse searching for their long lost human dad.\"\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.89.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "resume.baml": "// Defining a data model.\r\nclass Resume {\r\n  name string\r\n  email string\r\n  experience string[]\r\n  skills string[]\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractResume(resume: string) -> Resume {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    Extract from this content:\r\n    {{ resume }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest vaibhav_resume {\r\n  functions [ExtractResume]\r\n  args {\r\n    resume #\"\r\n      Vaibhav Gupta\r\n      vbv@boundaryml.com\r\n\r\n      Experience:\r\n      - Founder at BoundaryML\r\n      - CV Engineer at Google\r\n      - CV Engineer at Microsoft\r\n\r\n      Skills:\r\n      - Rust\r\n      - C++\r\n    \"#\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return file_map